
name: back end auth pipeline

on:
  push:
    branches:
      - main

jobs:
  upload:
    runs-on: ubuntu-latest

    steps:
    - name: Check out
      uses: actions/checkout@v4
    
    - name: Show current directory contents
      run: |
        echo "Current directory: $GITHUB_WORKSPACE"
        ls -al $GITHUB_WORKSPACE/auth-service
     
    - name: Upload auth artifacts
      uses: actions/upload-artifact@v4
      with:
        name: auth-artifacts
        path: auth-service

    

  deploy_orders:
    runs-on: ubuntu-latest
    needs: upload
    steps:
    - name: Download order artifacts
      uses: actions/download-artifact@v4
      with:
        name: auth-artifacts
        path: ./auth-artifacts
    
    - name: Add frontend VM to known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.FRONTEND_VM_PUBLIC_IP }} >> ~/.ssh/known_hosts

    - name: SSH to frontend VM (jump host)
      run: |
        # SSH into the frontend VM (jump host)
        sshpass -p "${{ secrets.PASSWORD }}" ssh \
        -o StrictHostKeyChecking=no \
        -o ProxyCommand="sshpass -p '${{ secrets.PASSWORD }}' ssh -o StrictHostKeyChecking=no -W %h:%p adminuser@${{ secrets.FRONTEND_VM_PUBLIC_IP }}" \
        adminuser@${{ secrets.AUTH_HOST }} "mkdir -p /home/adminuser/auth"
      
    - name: Transfer order artifacts to backend VM (via frontend VM)
      run: |
        # Use SCP to transfer the artifacts to the backend VM via the frontend VM (jump host)
        sshpass -p "${{ secrets.PASSWORD }}" scp \
        -o StrictHostKeyChecking=no \
        -o ProxyCommand="sshpass -p '${{ secrets.PASSWORD }}' ssh -o StrictHostKeyChecking=no -W %h:%p adminuser@${{ secrets.FRONTEND_VM_PUBLIC_IP }}" -r ./auth-artifacts/* adminuser@${{ secrets.AUTH_HOST }}:/home/adminuser/auth
    
    - name: Deploy to backend VM
      run: |
        sshpass -p "${{ secrets.PASSWORD }}" ssh \
        -o StrictHostKeyChecking=no \
        -o ProxyCommand="sshpass -p '${{ secrets.PASSWORD }}' ssh -o StrictHostKeyChecking=no -W %h:%p adminuser@${{ secrets.FRONTEND_VM_PUBLIC_IP }}" \
        adminuser@${{ secrets.AUTH_HOST }} << 'EOF'
        cd /home/adminuser/auth
        sudo apt update
        sudo apt install python3 python3-pip -y
        sudo apt install python3-venv -y
        python3 -m venv venv
        source venv/bin/activate
        pip install --no-cache-dir -r requirements.txt
        export DATABASE_URL="postgresql+asyncpg://postgres:${{ secrets.DB_PASSWORD }}@stylestoreserver.postgres.database.azure.com:5432/auth_db"
        nohup /home/adminuser/auth/venv/bin/uvicorn main:app --host 0.0.0.0 --port 8000 --reload > uvicorn.log 2>&1 &
        EOF
  # changes done

